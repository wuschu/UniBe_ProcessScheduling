/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. .\CScript.jj */
/*@egen*/ /**
* JJTree file
*/

options {
  JDK_VERSION = "1.5";
  LOOKAHEAD=2;
  STATIC=false;                                           
}

PARSER_BEGIN(CScriptParser)
package cdtl.csi;

import java.util.Hashtable;
import java.util.Random;

@SuppressWarnings({"all"})
public class CScriptParser implements/*@bgen(jjtree)*/ CScriptParserTreeConstants, /*@egen*/ cdtl.CharacterInterpretedInputStream.CharacterScriptParser {/*@bgen(jjtree)*/
  protected JJTCScriptParserState jjtree = new JJTCScriptParserState();

/*@egen*/
	/* Members */
	private Hashtable<String, Object> dictionary=new Hashtable<String, Object>();

	private int level=0;
	private int skipLevel=Integer.MAX_VALUE;

	private Random rgen=new Random();

	/* Accessors */
	public Object getFromDictionary(String key) {
		return dictionary.get(key);
	}

	public Object putInDictionary(String key, Object value) {
		return dictionary.put(key, value);
	}

	public int getLevel() {
		return level;
	}

	public void incrementLevel(int delta) {
		level+=delta;
	}

	public void decrementLevel(int delta) {
		level-=delta;
	}

	public int getSkipLevel() {
		return skipLevel;
	}

	public void setSkipping(boolean s) {
		skipLevel=s?level:Integer.MAX_VALUE;
	}

	public void startSkipping() {
		skipLevel=level;
	}

	public void stopSkipping() {
		skipLevel=Integer.MAX_VALUE;
	}

	public boolean isExecutable() {
		return level<skipLevel;
	}

	public Random getRandomGenerator() {
		return rgen;
	}

	/* ParseScript method */
	public cdtl.CharacterInterpretedInputStream.CharacterScript parseScript(String script) throws cdtl.InterpreterParseException {
		/* Reinitializing input stream (keeps current state) */
		int state=token_source.curLexState;
		ReInit(new java.io.StringReader(script));
		token_source.curLexState=state;

		/* Parsing */
		try{
			return Root();
		}
		catch(ParseException ex) {
			throw new cdtl.InterpreterParseException(ex.getMessage(), script);
		}
	}

	/* Testing case entry point */
	public static void main(String args[]) {
		System.out.println("Reading from standard input...");
		System.out.print("Enter an expression like \"1+(2+3)*var;\" :");
		CScriptParser parser= new CScriptParser(System.in);
		try {
  			SimpleNode n = parser.Root();
 			n.dump("");
			System.out.println("Thank you.");
		}
		catch (ParseException e) {
			System.out.println("Oops.");
 			System.out.println(e.getMessage());
    	}
	}
}
PARSER_END(CScriptParser)

TOKEN_MGR_DECLS : {
	java.util.Vector<Integer> stateStack=new java.util.Vector<Integer>();
}

<*> SKIP :
{
	" " |
	"\t" |
	"\n" |
	"\r"
}

/* PUNCTUATION */
<*> TOKEN : {<COMA: ","> }
<*> TOKEN : {<SEMICOLON: ";"> }
<*> TOKEN : {<PAR_OPEN: "("> }
<*> TOKEN : {<PAR_CLOSE: ")"> }
<*> TOKEN : {<BRACKET_OPEN: "["> }
<*> TOKEN : {<BRACKET_CLOSE: "]"> }

/* OPERATORS */
<*> TOKEN : {<EQUAL: "="> }

<*> TOKEN : {<AND: "&&"> }
<*> TOKEN : {<OR: "||"> }
<*> TOKEN : {<XOR: "^^"> }
<*> TOKEN : {<NOT: "!"> }
<*> TOKEN : {<EQUALITY: "=="> }
<*> TOKEN : {<UNEQUALITY: "!="> }
<*> TOKEN : {<LESSER: "<"> }
<*> TOKEN : {<LESSEREQ: "<="> }
<*> TOKEN : {<GREATER: ">"> }
<*> TOKEN : {<GREATEREQ: ">="> }

<*> TOKEN : {<PLUS: "+"> }
<*> TOKEN : {<MINUS: "-"> }
<*> TOKEN : {<MULTIPLY: "*"> }
<*> TOKEN : {<DIVIDE: "/"> }
<*> TOKEN : {<QUOTIENT: "DIV"> }
<*> TOKEN : {<REMAINDER: "MOD"> }

/* STATEMENTS */
<*> TOKEN : {<IF: "IF"> }
<*> TOKEN : {<THEN: "THEN" > {stateStack.add(curLexState);}: IF_THENSTATE}
<IF_THENSTATE> TOKEN : {<ELSE: "ELSE">: IF_ELSESTATE }
<IF_THENSTATE, IF_ELSESTATE> TOKEN : {<ENDIF: "ENDIF"> {SwitchTo(stateStack.remove(stateStack.size()-1));}}

<*> TOKEN : {<FOR: "FOR"> {stateStack.add(curLexState);}: FOR_STATE}
<FOR_STATE> TOKEN : {<ENDFOR: "ENDFOR" > {SwitchTo(stateStack.remove(stateStack.size()-1));}}

<*> TOKEN : /* LITERALS */
{
	<INTEGER_LITERAL: <DECIMAL_LITERAL> > |
	<DOUBLE_LITERAL: <DECIMAL_LITERAL> "." (<DIGIT>)* | "." (<DIGIT>)+ > |
	<BOOLEAN_LITERAL: "TRUE" | "FALSE" > |
	<TEXT_LITERAL: "\"" (~["\""])* "\"" > |
	<RANDOM_LITERAL: "RND" > |

	<#DECIMAL_LITERAL: ["1"-"9"] (<DIGIT>)* | "0"  > |
	<#DIGIT: ["0"-"9"] >
}

<*> TOKEN : /* IDENTIFIERS */
{
	<IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* > |

	<#LETTER: ["_","a"-"z","A"-"Z"] >
}

void Identifier(): {/*@bgen(jjtree) Identifier */
                    ASTIdentifier jjtn000 = new ASTIdentifier(this, JJTIDENTIFIER);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Identifier */
        try {
/*@egen*/
	t=<IDENTIFIER>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{jjtn000.setToken(t.kind, t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Integer(): {/*@bgen(jjtree) Integer */
                 ASTInteger jjtn000 = new ASTInteger(this, JJTINTEGER);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Integer */
        try {
/*@egen*/
	t=<INTEGER_LITERAL>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{jjtn000.setToken(t.kind, t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Double(): {/*@bgen(jjtree) Double */
                ASTDouble jjtn000 = new ASTDouble(this, JJTDOUBLE);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Double */
        try {
/*@egen*/
	t=<DOUBLE_LITERAL>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{jjtn000.setToken(t.kind, t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Boolean(): {/*@bgen(jjtree) Boolean */
                 ASTBoolean jjtn000 = new ASTBoolean(this, JJTBOOLEAN);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Boolean */
        try {
/*@egen*/
	t=<BOOLEAN_LITERAL>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{jjtn000.setToken(t.kind, t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void String(): {/*@bgen(jjtree) String */
                ASTString jjtn000 = new ASTString(this, JJTSTRING);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) String */
        try {
/*@egen*/
	t=<TEXT_LITERAL>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{jjtn000.setToken(t.kind, t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Random(): {/*@bgen(jjtree) Random */
  ASTRandom jjtn000 = new ASTRandom(this, JJTRANDOM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Random */
        try {
/*@egen*/
	<RANDOM_LITERAL>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void RandomRange(): {/*@bgen(jjtree) RandomRange */
  ASTRandomRange jjtn000 = new ASTRandomRange(this, JJTRANDOMRANGE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RandomRange */
        try {
/*@egen*/
	(
		<BRACKET_OPEN>
		{((ASTRandomRange)jjtn000).setBeginIncluded(true);}
		|
		<BRACKET_CLOSE>
		{((ASTRandomRange)jjtn000).setBeginIncluded(false);}
	)
	EvaluableExpression()
	<COMA>
	EvaluableExpression()
	(
		<BRACKET_CLOSE>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/
		{((ASTRandomRange)jjtn000).setEndIncluded(true);}
		|
		<BRACKET_OPEN>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/
		{((ASTRandomRange)jjtn000).setEndIncluded(false);}
	)/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

SimpleNode Root(): {/*@bgen(jjtree) Root */
  ASTRoot jjtn000 = new ASTRoot(this, JJTROOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Root */
        try {
/*@egen*/
	RootBlock()
	<EOF>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void RootBlock()         : {/*@bgen(jjtree) #Block(true) */
  ASTBlock jjtn000 = new ASTBlock(this, JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #Block(true) */
        try {
/*@egen*/
	(
		Controls()
		|
		ControlStatement()
		|
		Instruction()
		<SEMICOLON>
	)+/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void InstructionBlock()         : {/*@bgen(jjtree) #Block(true) */
  ASTBlock jjtn000 = new ASTBlock(this, JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #Block(true) */
        try {
/*@egen*/
	(
		ControlStatement()
		|
		Instruction()
		<SEMICOLON>
	)+/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ControlStatement()                          : {/*@bgen(jjtree) #_ControlStatement( false) */
  AST_ControlStatement jjtn000 = new AST_ControlStatement(this, JJT_CONTROLSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #_ControlStatement( false) */
        try {
/*@egen*/
	IfStatement()
	|
	ForStatement()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000,  false);
          }
        }
/*@egen*/
}

void Controls()                  : {/*@bgen(jjtree) #_Controls( false) */
  AST_Controls jjtn000 = new AST_Controls(this, JJT_CONTROLS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #_Controls( false) */
        try {
/*@egen*/
	IfElseControl()
	|
	IfEndControl()
	|
	ForEndControl()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000,  false);
          }
        }
/*@egen*/
}

void IfStatement()               : {/*@bgen(jjtree) #IfStatement(true) */
  ASTIfStatement jjtn000 = new ASTIfStatement(this, JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #IfStatement(true) */
        try {
/*@egen*/
	<IF>
	EvaluableExpression()
	<THEN>
	(
		<EOF>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/
		{((ASTIfStatement)jjtn000).setCompleted(false);}
		|
		InstructionBlock()
		(
			(
				<EOF>/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/
				{((ASTIfStatement)jjtn000).setCompleted(false);}
				|
				<ENDIF>/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/
				{((ASTIfStatement)jjtn000).setCompleted(true);}
			)
			|
			<ELSE>
			(
				<EOF>/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/
				{((ASTIfStatement)jjtn000).setCompleted(false);}
				|
				InstructionBlock()
				(
					<EOF>/*@bgen(jjtree)*/
                                        {
                                          jjtree.closeNodeScope(jjtn000, true);
                                          jjtc000 = false;
                                        }
/*@egen*/
					{((ASTIfStatement)jjtn000).setCompleted(false);}
					|
					<ENDIF>/*@bgen(jjtree)*/
                                        {
                                          jjtree.closeNodeScope(jjtn000, true);
                                          jjtc000 = false;
                                        }
/*@egen*/
					{((ASTIfStatement)jjtn000).setCompleted(true);}
				)
			)
		)
	)/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void IfElseControl()                 : {/*@bgen(jjtree) #IfElseControl(true) */
  ASTIfElseControl jjtn000 = new ASTIfElseControl(this, JJTIFELSECONTROL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #IfElseControl(true) */
        try {
/*@egen*/
	<ELSE>
	(
		<EOF>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/
		{((ASTIfElseControl)jjtn000).setCompleted(false);}
		|
		InstructionBlock()
		(
			<EOF>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/
			{((ASTIfElseControl)jjtn000).setCompleted(false);}
			|
			<ENDIF>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/
			{((ASTIfElseControl)jjtn000).setCompleted(true);}
		)
	)/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void IfEndControl()                : {/*@bgen(jjtree) #IfEndControl(true) */
  ASTIfEndControl jjtn000 = new ASTIfEndControl(this, JJTIFENDCONTROL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #IfEndControl(true) */
        try {
/*@egen*/
	<ENDIF>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ForStatement()                : {/*@bgen(jjtree) #ForStatement(true) */
  ASTForStatement jjtn000 = new ASTForStatement(this, JJTFORSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #ForStatement(true) */
        try {
/*@egen*/
	<FOR>
	<PAR_OPEN>
	Instruction()
	<SEMICOLON>
	EvaluableExpression()
	<SEMICOLON>
	Instruction()
	<PAR_CLOSE>
	(
		<EOF>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/
		{((ASTForStatement)jjtn000).setCompleted(false);}
		|
		InstructionBlock()
		(
			<EOF>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/
			{((ASTForStatement)jjtn000).setCompleted(false);}
			|
			<ENDFOR>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/
			{((ASTForStatement)jjtn000).setCompleted(true);}
		)
	)/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ForEndControl()                 : {/*@bgen(jjtree) #ForEndControl(true) */
  ASTForEndControl jjtn000 = new ASTForEndControl(this, JJTFORENDCONTROL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #ForEndControl(true) */
        try {
/*@egen*/
	<ENDFOR>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Instruction()                     : {/*@bgen(jjtree) #_Instruction( false) */
  AST_Instruction jjtn000 = new AST_Instruction(this, JJT_INSTRUCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #_Instruction( false) */
        try {
/*@egen*//*@bgen(jjtree) #EvaluationInstruction( 1) */
        {
          ASTEvaluationInstruction jjtn001 = new ASTEvaluationInstruction(this, JJTEVALUATIONINSTRUCTION);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	EvaluableExpression()/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  1);
          }
        }
/*@egen*/
	|
	PrintInstruction()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000,  false);
          }
        }
/*@egen*/
}

void PrintInstruction()                    : {/*@bgen(jjtree) #PrintInstruction(true) */
  ASTPrintInstruction jjtn000 = new ASTPrintInstruction(this, JJTPRINTINSTRUCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #PrintInstruction(true) */
        try {
/*@egen*/
	<EQUAL>
	EvaluableExpression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void EvaluableExpression()                             :{/*@bgen(jjtree) #_EvaluableExpression( false) */
                                                         AST_EvaluableExpression jjtn000 = new AST_EvaluableExpression(this, JJT_EVALUABLEEXPRESSION);
                                                         boolean jjtc000 = true;
                                                         jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) #_EvaluableExpression( false) */
        try {
/*@egen*/
	Identifier()
	<EQUAL>/*@bgen(jjtree) #AssignementExpression( 2) */
        {
          ASTAssignementExpression jjtn001 = new ASTAssignementExpression(this, JJTASSIGNEMENTEXPRESSION);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	EvaluableExpression()/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
          }
        }
/*@egen*/
	|
	Level1()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000,  false);
          }
        }
/*@egen*/
}

void Level1()                :{/*@bgen(jjtree) #_Level1( false) */
  AST_Level1 jjtn000 = new AST_Level1(this, JJT_LEVEL1);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} //BooleanExpression
{/*@bgen(jjtree) #_Level1( false) */
        try {
/*@egen*/
	Level2()
	(
		<AND>/*@bgen(jjtree) #BooleanAnd( 2) */
                {
                  ASTBooleanAnd jjtn001 = new ASTBooleanAnd(this, JJTBOOLEANAND);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                }
                try {
/*@egen*/
		Level1()/*@bgen(jjtree)*/
                } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    throw (RuntimeException)jjte001;
                  }
                  if (jjte001 instanceof ParseException) {
                    throw (ParseException)jjte001;
                  }
                  throw (Error)jjte001;
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
                }
/*@egen*/
	|
		<OR>/*@bgen(jjtree) #BooleanOr( 2) */
                {
                  ASTBooleanOr jjtn002 = new ASTBooleanOr(this, JJTBOOLEANOR);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
                }
                try {
/*@egen*/
		Level1()/*@bgen(jjtree)*/
                } catch (Throwable jjte002) {
                  if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte002 instanceof RuntimeException) {
                    throw (RuntimeException)jjte002;
                  }
                  if (jjte002 instanceof ParseException) {
                    throw (ParseException)jjte002;
                  }
                  throw (Error)jjte002;
                } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002,  2);
                  }
                }
/*@egen*/
	)*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000,  false);
          }
        }
/*@egen*/
}

void Level2()                :{/*@bgen(jjtree) #_Level2( false) */
  AST_Level2 jjtn000 = new AST_Level2(this, JJT_LEVEL2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} //BooleanTerm
{/*@bgen(jjtree) #_Level2( false) */
        try {
/*@egen*/
	Level3()
	(
		<XOR>/*@bgen(jjtree) #BooleanXor( 2) */
                {
                  ASTBooleanXor jjtn001 = new ASTBooleanXor(this, JJTBOOLEANXOR);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                }
                try {
/*@egen*/
  	 	Level2()/*@bgen(jjtree)*/
                } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    throw (RuntimeException)jjte001;
                  }
                  if (jjte001 instanceof ParseException) {
                    throw (ParseException)jjte001;
                  }
                  throw (Error)jjte001;
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
                }
/*@egen*/
	)*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000,  false);
          }
        }
/*@egen*/
}

void Level3()                :{/*@bgen(jjtree) #_Level3( false) */
  AST_Level3 jjtn000 = new AST_Level3(this, JJT_LEVEL3);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} //BooleanFactor
{/*@bgen(jjtree) #_Level3( false) */
        try {
/*@egen*/
	Level4()
	|
		<NOT>/*@bgen(jjtree) #BooleanNot( 1) */
                {
                  ASTBooleanNot jjtn001 = new ASTBooleanNot(this, JJTBOOLEANNOT);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                }
                try {
/*@egen*/
		Level3()/*@bgen(jjtree)*/
                } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    throw (RuntimeException)jjte001;
                  }
                  if (jjte001 instanceof ParseException) {
                    throw (ParseException)jjte001;
                  }
                  throw (Error)jjte001;
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  1);
                  }
                }
/*@egen*//*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000,  false);
          }
        }
/*@egen*/
}

void Level4()                :{/*@bgen(jjtree) #_Level4( false) */
  AST_Level4 jjtn000 = new AST_Level4(this, JJT_LEVEL4);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} //BooleanUnit
{/*@bgen(jjtree) #_Level4( false) */
        try {
/*@egen*/
	Level5()
	(
		<EQUALITY>/*@bgen(jjtree) #BooleanEquality( 2) */
                {
                  ASTBooleanEquality jjtn001 = new ASTBooleanEquality(this, JJTBOOLEANEQUALITY);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                }
                try {
/*@egen*/
		Level4()/*@bgen(jjtree)*/
                } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    throw (RuntimeException)jjte001;
                  }
                  if (jjte001 instanceof ParseException) {
                    throw (ParseException)jjte001;
                  }
                  throw (Error)jjte001;
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
                }
/*@egen*/
	|
		<UNEQUALITY>/*@bgen(jjtree) #BooleanUnequality( 2) */
                {
                  ASTBooleanUnequality jjtn002 = new ASTBooleanUnequality(this, JJTBOOLEANUNEQUALITY);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
                }
                try {
/*@egen*/
		Level4()/*@bgen(jjtree)*/
                } catch (Throwable jjte002) {
                  if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte002 instanceof RuntimeException) {
                    throw (RuntimeException)jjte002;
                  }
                  if (jjte002 instanceof ParseException) {
                    throw (ParseException)jjte002;
                  }
                  throw (Error)jjte002;
                } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002,  2);
                  }
                }
/*@egen*/
	)*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000,  false);
          }
        }
/*@egen*/
}

void Level5()                :{/*@bgen(jjtree) #_Level5( false) */
  AST_Level5 jjtn000 = new AST_Level5(this, JJT_LEVEL5);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} //BooleanPrimary
{/*@bgen(jjtree) #_Level5( false) */
        try {
/*@egen*/
	Level6()
	(
		<LESSER>/*@bgen(jjtree) #BooleanLesser( 2) */
                {
                  ASTBooleanLesser jjtn001 = new ASTBooleanLesser(this, JJTBOOLEANLESSER);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                }
                try {
/*@egen*/
		Level6()/*@bgen(jjtree)*/
                } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    throw (RuntimeException)jjte001;
                  }
                  if (jjte001 instanceof ParseException) {
                    throw (ParseException)jjte001;
                  }
                  throw (Error)jjte001;
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
                }
/*@egen*/
	|
		<LESSEREQ>/*@bgen(jjtree) #BooleanLesserEq( 2) */
                {
                  ASTBooleanLesserEq jjtn002 = new ASTBooleanLesserEq(this, JJTBOOLEANLESSEREQ);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
                }
                try {
/*@egen*/
		Level6()/*@bgen(jjtree)*/
                } catch (Throwable jjte002) {
                  if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte002 instanceof RuntimeException) {
                    throw (RuntimeException)jjte002;
                  }
                  if (jjte002 instanceof ParseException) {
                    throw (ParseException)jjte002;
                  }
                  throw (Error)jjte002;
                } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002,  2);
                  }
                }
/*@egen*/
	|
		<GREATER>/*@bgen(jjtree) #BooleanGreater( 2) */
                {
                  ASTBooleanGreater jjtn003 = new ASTBooleanGreater(this, JJTBOOLEANGREATER);
                  boolean jjtc003 = true;
                  jjtree.openNodeScope(jjtn003);
                }
                try {
/*@egen*/
		Level6()/*@bgen(jjtree)*/
                } catch (Throwable jjte003) {
                  if (jjtc003) {
                    jjtree.clearNodeScope(jjtn003);
                    jjtc003 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte003 instanceof RuntimeException) {
                    throw (RuntimeException)jjte003;
                  }
                  if (jjte003 instanceof ParseException) {
                    throw (ParseException)jjte003;
                  }
                  throw (Error)jjte003;
                } finally {
                  if (jjtc003) {
                    jjtree.closeNodeScope(jjtn003,  2);
                  }
                }
/*@egen*/
	|
		<GREATEREQ>/*@bgen(jjtree) #BooleanGreaterEq( 2) */
                {
                  ASTBooleanGreaterEq jjtn004 = new ASTBooleanGreaterEq(this, JJTBOOLEANGREATEREQ);
                  boolean jjtc004 = true;
                  jjtree.openNodeScope(jjtn004);
                }
                try {
/*@egen*/
		Level6()/*@bgen(jjtree)*/
                } catch (Throwable jjte004) {
                  if (jjtc004) {
                    jjtree.clearNodeScope(jjtn004);
                    jjtc004 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte004 instanceof RuntimeException) {
                    throw (RuntimeException)jjte004;
                  }
                  if (jjte004 instanceof ParseException) {
                    throw (ParseException)jjte004;
                  }
                  throw (Error)jjte004;
                } finally {
                  if (jjtc004) {
                    jjtree.closeNodeScope(jjtn004,  2);
                  }
                }
/*@egen*/
	)*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000,  false);
          }
        }
/*@egen*/
}

void Level6()                :{/*@bgen(jjtree) #_Level6( false) */
  AST_Level6 jjtn000 = new AST_Level6(this, JJT_LEVEL6);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} //MathExpression
{/*@bgen(jjtree) #_Level6( false) */
        try {
/*@egen*/
	Level7()
	(
		<PLUS>/*@bgen(jjtree) #MathAdd( 2) */
                {
                  ASTMathAdd jjtn001 = new ASTMathAdd(this, JJTMATHADD);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                }
                try {
/*@egen*/
		Level6()/*@bgen(jjtree)*/
                } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    throw (RuntimeException)jjte001;
                  }
                  if (jjte001 instanceof ParseException) {
                    throw (ParseException)jjte001;
                  }
                  throw (Error)jjte001;
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
                }
/*@egen*/
	|
		<MINUS>/*@bgen(jjtree) #MathSub( 2) */
                {
                  ASTMathSub jjtn002 = new ASTMathSub(this, JJTMATHSUB);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
                }
                try {
/*@egen*/
		Level6()/*@bgen(jjtree)*/
                } catch (Throwable jjte002) {
                  if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte002 instanceof RuntimeException) {
                    throw (RuntimeException)jjte002;
                  }
                  if (jjte002 instanceof ParseException) {
                    throw (ParseException)jjte002;
                  }
                  throw (Error)jjte002;
                } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002,  2);
                  }
                }
/*@egen*/
	)*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000,  false);
          }
        }
/*@egen*/
}

void Level7()                :{/*@bgen(jjtree) #_Level7( false) */
  AST_Level7 jjtn000 = new AST_Level7(this, JJT_LEVEL7);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} //MathTerm
{/*@bgen(jjtree) #_Level7( false) */
        try {
/*@egen*/
	Level8()
	(
		<MULTIPLY>/*@bgen(jjtree) #MathMul( 2) */
                {
                  ASTMathMul jjtn001 = new ASTMathMul(this, JJTMATHMUL);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                }
                try {
/*@egen*/
  	 	Level7()/*@bgen(jjtree)*/
                } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    throw (RuntimeException)jjte001;
                  }
                  if (jjte001 instanceof ParseException) {
                    throw (ParseException)jjte001;
                  }
                  throw (Error)jjte001;
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
                }
/*@egen*/
  	|
  		<DIVIDE>/*@bgen(jjtree) #MathDiv( 2) */
                {
                  ASTMathDiv jjtn002 = new ASTMathDiv(this, JJTMATHDIV);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
                }
                try {
/*@egen*/
  	 	Level7()/*@bgen(jjtree)*/
                } catch (Throwable jjte002) {
                  if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte002 instanceof RuntimeException) {
                    throw (RuntimeException)jjte002;
                  }
                  if (jjte002 instanceof ParseException) {
                    throw (ParseException)jjte002;
                  }
                  throw (Error)jjte002;
                } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002,  2);
                  }
                }
/*@egen*/
  	 |
  		<QUOTIENT>/*@bgen(jjtree) #MathQuotient( 2) */
                {
                  ASTMathQuotient jjtn003 = new ASTMathQuotient(this, JJTMATHQUOTIENT);
                  boolean jjtc003 = true;
                  jjtree.openNodeScope(jjtn003);
                }
                try {
/*@egen*/
  	 	Level7()/*@bgen(jjtree)*/
                } catch (Throwable jjte003) {
                  if (jjtc003) {
                    jjtree.clearNodeScope(jjtn003);
                    jjtc003 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte003 instanceof RuntimeException) {
                    throw (RuntimeException)jjte003;
                  }
                  if (jjte003 instanceof ParseException) {
                    throw (ParseException)jjte003;
                  }
                  throw (Error)jjte003;
                } finally {
                  if (jjtc003) {
                    jjtree.closeNodeScope(jjtn003,  2);
                  }
                }
/*@egen*/
  	|
  		<REMAINDER>/*@bgen(jjtree) #MathRemainder( 2) */
                {
                  ASTMathRemainder jjtn004 = new ASTMathRemainder(this, JJTMATHREMAINDER);
                  boolean jjtc004 = true;
                  jjtree.openNodeScope(jjtn004);
                }
                try {
/*@egen*/
  	 	Level7()/*@bgen(jjtree)*/
                } catch (Throwable jjte004) {
                  if (jjtc004) {
                    jjtree.clearNodeScope(jjtn004);
                    jjtc004 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte004 instanceof RuntimeException) {
                    throw (RuntimeException)jjte004;
                  }
                  if (jjte004 instanceof ParseException) {
                    throw (ParseException)jjte004;
                  }
                  throw (Error)jjte004;
                } finally {
                  if (jjtc004) {
                    jjtree.closeNodeScope(jjtn004,  2);
                  }
                }
/*@egen*/
	)*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000,  false);
          }
        }
/*@egen*/
}

void Level8()                :{/*@bgen(jjtree) #_Level8( false) */
  AST_Level8 jjtn000 = new AST_Level8(this, JJT_LEVEL8);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} // MathFactor
{/*@bgen(jjtree) #_Level8( false) */
        try {
/*@egen*/
	Primary()
	|
	<MINUS>/*@bgen(jjtree) #MathNegate( 1) */
        {
          ASTMathNegate jjtn001 = new ASTMathNegate(this, JJTMATHNEGATE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	Level8()/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  1);
          }
        }
/*@egen*/
	|
	<PAR_OPEN>
	EvaluableExpression()
	<PAR_CLOSE>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000,  false);
          }
        }
/*@egen*/
}

void Primary()                 : {/*@bgen(jjtree) #_Primary( false) */
                                  AST_Primary jjtn000 = new AST_Primary(this, JJT_PRIMARY);
                                  boolean jjtc000 = true;
                                  jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) #_Primary( false) */
        try {
/*@egen*/
	Identifier()
	|
	Integer()
	|
	Double()
	|
	Boolean()
	|
	String()
	|
	Random()
	|
	RandomRange()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000,  false);
          }
        }
/*@egen*/
}

